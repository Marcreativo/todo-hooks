{"version":3,"sources":["components/TasksList.js","App.js","helpers/index.js","serviceWorker.js","index.js"],"names":["TasksList","data","changeStatus","tag","title","deleteTask","editTask","List","reverse","map","e","i","ListItem","button","key","ListItemText","onClick","id","text","Button","variant","App","useState","taskValue","setTaskValue","todoList","setTodoList","isModalOpen","toggleModalState","useEffect","console","log","persistedState","window","localStorage","getItem","JSON","parse","setItem","stringify","toggleModal","newList","splice","list","indexOf","find","findIndex","changeTaskState","task","status","openEditModal","completed","filter","pending","Container","CssBaseline","TextField","value","label","onChange","target","onKeyPress","newTask","prefix","Math","random","toString","replace","enterHandler","name","Modal","open","onClose","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.393f45fd.chunk.js","sourcesContent":["import React from 'react'\nimport { List, ListItem, ListItemText, Button } from '@material-ui/core'\n\nconst TasksList = ({ data, changeStatus, tag, title, deleteTask, editTask }) => {\n\treturn (\n\t\t<List>\n\t\t\t<h2>{title}</h2>\n\t\t\t{data.reverse().map((e, i) => (\n\t\t\t\t<ListItem button key={i}>\n\t\t\t\t\t<ListItemText onClick={() => changeStatus(e.id)}>\n\t\t\t\t\t\t{tag} {e.text}\n\t\t\t\t\t</ListItemText>\n\t\t\t\t\t<Button variant={'contained'} onClick={() => deleteTask(e.id)}>\n\t\t\t\t\t\tx\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant={'contained'} onClick={() => editTask(e.id)}>\n\t\t\t\t\t\tEditar\n\t\t\t\t\t</Button>\n\t\t\t\t</ListItem>\n\t\t\t))}\n\t\t</List>\n\t)\n}\n\nexport default TasksList\n","import React, { useState, useEffect } from 'react'\nimport { CssBaseline, Container, Button, TextField, Modal } from '@material-ui/core'\n\nimport TasksList from './components/TasksList'\nimport { idGen, findIndex } from './helpers/'\nimport './App.scss'\n\nconst App = () => {\n\tconst [ taskValue, setTaskValue ] = useState('')\n\tconst [ todoList, setTodoList ] = useState([])\n\tconst [ isModalOpen, toggleModalState ] = useState(false)\n\n\tuseEffect(() => {\n\t\tconsole.log('levanto del storage')\n\t\tconst persistedState = window.localStorage.getItem('todo-state')\n\t\tsetTodoList([ ...(JSON.parse(persistedState) || '') ])\n\t}, [])\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconsole.log('guardo en el storage')\n\t\t\twindow.localStorage.setItem('todo-state', JSON.stringify(todoList))\n\t\t},\n\t\t[ todoList ]\n\t)\n\n\tconst toggleModal = () => toggleModalState(!isModalOpen)\n\n\tconst enterHandler = (e) => {\n\t\tif (e.key === 'Enter' && taskValue) {\n\t\t\tlet newTask = { id: idGen('task'), text: taskValue, status: 'pending' }\n\t\t\tsetTodoList([ newTask, ...todoList ])\n\t\t\tsetTaskValue('')\n\t\t}\n\t}\n\n\tconst deleteTask = (id) => {\n\t\tlet newList = [ ...todoList ]\n\t\tnewList.splice(findIndex(newList, id), 1)\n\t\tsetTodoList(newList)\n\t}\n\n\tconst changeTaskState = (id) => {\n\t\tlet newList = [ ...todoList ]\n\t\tlet task = newList.find((e) => e.id === id)\n\t\ttask.status = task.status === 'pending' ? 'completed' : 'pending'\n\t\tsetTodoList(newList)\n\t}\n\n\tconst openEditModal = () => {\n\t\ttoggleModal()\n\t}\n\n\tconst completed = todoList.filter((e) => e.status === 'completed')\n\tconst pending = todoList.filter((e) => e.status === 'pending')\n\treturn (\n\t\t<Container>\n\t\t\t<CssBaseline />\n\t\t\t<h1>Todo List</h1>\n\t\t\t<TextField\n\t\t\t\tvalue={taskValue}\n\t\t\t\tlabel={'Ingrese tarea'}\n\t\t\t\tonChange={(e) => setTaskValue(e.target.value)}\n\t\t\t\tonKeyPress={(e) => enterHandler(e)}\n\t\t\t\tname={'task'}\n\t\t\t\tvariant=\"outlined\"\n\t\t\t/>\n\t\t\t<TasksList\n\t\t\t\ttitle={'pendientes'}\n\t\t\t\ttag={'()'}\n\t\t\t\tdata={pending}\n\t\t\t\tdeleteTask={deleteTask}\n\t\t\t\tchangeStatus={changeTaskState}\n\t\t\t\teditTask={openEditModal}\n\t\t\t/>\n\t\t\t<TasksList\n\t\t\t\ttitle={'completadas'}\n\t\t\t\ttag={'(x)'}\n\t\t\t\tdata={completed}\n\t\t\t\tdeleteTask={deleteTask}\n\t\t\t\tchangeStatus={changeTaskState}\n\t\t\t\teditTask={openEditModal}\n\t\t\t/>\n\t\t\t<Modal open={isModalOpen} onClose={toggleModal}>\n\t\t\t\t<div className={'modal-content'}>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<h3>Editar:</h3>\n\t\t\t\t\t\t<TextField value={''} name={'editField'} />\n\t\t\t\t\t\t<Button onClick={toggleModal}>Cancelar</Button>\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t</Container>\n\t)\n}\n\nexport default App\n","const idGen = (prefix) => `${prefix}-${Math.random().toString().replace('.', '')}`\nconst findIndex = (list, id) => list.indexOf(list.find((e) => e.id === id))\n\nexport { idGen, findIndex }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}